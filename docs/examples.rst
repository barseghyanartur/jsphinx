Examples
========
``jsphinx-download`` directive usage
------------------------------------

Example 1
~~~~~~~~~

See the following full functional snippet for generating a ``DOCX`` file.

.. literalinclude:: examples/simple/snippet_1.py
    :language: python
    :lines: 3-11

.. container:: jsphinx-download

    *See the full example*
    :download:`here <examples/simple/snippet_1.py>`

----

The documentation snippet, the above (`Example 1`_) code was rendered from:

*Filename: example.rst*

.. code-block:: rst

    See the following full functional snippet for generating a ``DOCX`` file.

    .. literalinclude:: examples/simple/snippet_1.py
        :language: python
        :lines: 3-11

    .. container:: jsphinx-download

        *See the full example*
        :download:`here <examples/simple/snippet_1.py>`

----

Example 2
~~~~~~~~~

See the example below for ``max_nb_chars`` tweak:

.. literalinclude:: examples/simple/snippet_2.py
    :language: python
    :lines: 8-

.. container:: jsphinx-download

    *See the full example*
    :download:`here <examples/simple/snippet_2.py>`

----

The documentation snippet, the above (`Example 2`_) code was rendered from:

*Filename: example.rst*

.. code-block:: rst

    See the example below for ``max_nb_chars`` tweak:

    .. literalinclude:: examples/simple/snippet_2.py
        :language: python
        :lines: 8-

    .. container:: jsphinx-download

        *See the full example*
        :download:`here <examples/simple/snippet_2.py>`

----

Example 3
~~~~~~~~~

See the example below for ``wrap_chars_after`` tweak:

.. literalinclude:: examples/simple/snippet_3.py
    :language: python
    :lines: 8-

.. container:: jsphinx-download

    *See the full example*
    :download:`here <examples/simple/snippet_3.py>`

----

The documentation snippet, the above (`Example 3`_) code was rendered from:

*Filename: example.rst*

.. code-block:: rst

    See the example below for ``wrap_chars_after`` tweak:

    .. literalinclude:: examples/simple/snippet_3.py
        :language: python
        :lines: 8-

    .. container:: jsphinx-download

        *See the full example*
        :download:`here <examples/simple/snippet_3.py>`

----

Example 4
~~~~~~~~~

In order to customise the blocks ``DOCX`` file is built from,
the ``DynamicTemplate`` class is used. See the example below for usage
examples:

.. literalinclude:: examples/simple/snippet_4.py
    :language: python
    :lines: 3-9, 14-31

.. container:: jsphinx-download

    *See the full example*
    :download:`here <examples/simple/snippet_4.py>`

----

The documentation snippet, the above (`Example 4`_) code was rendered from:

*Filename: example.rst*

.. code-block:: rst

    In order to customise the blocks ``DOCX`` file is built from,
    the ``DynamicTemplate`` class is used. See the example below for usage
    examples:

    .. literalinclude:: examples/simple/snippet_4.py
        :language: python
        :lines: 3-9, 14-31

    .. container:: jsphinx-download

        *See the full example*
        :download:`here <examples/simple/snippet_4.py>`

----

``jsphinx-toggle-emphasis`` directive usage
-------------------------------------------

Example 5
~~~~~~~~~

Generate a TXT file.

.. container:: jsphinx-toggle-emphasis

    .. code-block:: python
        :emphasize-lines: 3-4,6,8

        from faker import Faker
        # Import the file provider we want to use
        from faker_file.providers.txt_file import TxtFileProvider

        FAKER = Faker()  # Initialise Faker instance
        FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

        txt_file = FAKER.txt_file()  # Generate a TXT file

        # Meta-data is stored inside a ``data`` attribute (``dict``).
        # The following line would produce something like /tmp/tmp/tmph8ot.txt
        print(file.data["filename"])
        # The following line would produce a text generated by Faker, used as
        # the content of the generated file.
        print(file.data["content"])

----

The documentation snippet, the above (`Example 5`_) code was rendered from:

*Filename: example.rst*

.. code-block:: rst

    Generate a TXT file.

    .. container:: jsphinx-toggle-emphasis

        .. code-block:: python
            :emphasize-lines: 3-4,6,8

            from faker import Faker
            # Import the file provider we want to use
            from faker_file.providers.txt_file import TxtFileProvider

            FAKER = Faker()  # Initialise Faker instance
            FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

            txt_file = FAKER.txt_file()  # Generate a TXT file

            # Meta-data is stored inside a ``data`` attribute (``dict``).
            # The following line would produce something like /tmp/tmp/tmph8ot.txt
            print(file.data["filename"])
            # The following line would produce a text generated by Faker, used as
            # the content of the generated file.
            print(file.data["content"])

----

Example 6
~~~~~~~~~

You could get just bytes back without physically creating the file.

.. container:: jsphinx-toggle-emphasis

    .. code-block:: python
        :emphasize-lines: 7

        from faker import Faker
        from faker_file.providers.txt_file import TxtFileProvider

        FAKER = Faker()  # Initialise Faker instance
        FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

        raw = FAKER.txt_file(raw=True)  # Generate a TXT file

----

The documentation snippet, the above (`Example 6`_) code was rendered from:

*Filename: example.rst*

.. code-block:: rst

    .. container:: jsphinx-toggle-emphasis

        .. code-block:: python
            :emphasize-lines: 7

            from faker import Faker
            from faker_file.providers.txt_file import TxtFileProvider

            FAKER = Faker()  # Initialise Faker instance
            FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

            raw = FAKER.txt_file(raw=True)  # Generate a TXT file

----

``jsphinx-toggle-emphasis-replace`` directive usage
---------------------------------------------------

Example 7
~~~~~~~~~

Generate a TXT file.

.. container:: jsphinx-toggle-emphasis-replace

    .. code-block:: python
        :emphasize-lines: 3-4,6,8

        from faker import Faker
        # Import the file provider we want to use
        from faker_file.providers.txt_file import TxtFileProvider

        FAKER = Faker()  # Initialise Faker instance
        FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

        txt_file = FAKER.txt_file()  # Generate a TXT file

        # Meta-data is stored inside a ``data`` attribute (``dict``).
        # The following line would produce something like /tmp/tmp/tmph8ot.txt
        print(file.data["filename"])
        # The following line would produce a text generated by Faker, used as
        # the content of the generated file.
        print(file.data["content"])

----

The documentation snippet, the above (`Example 7`_) code was rendered from:

*Filename: example.rst*

.. code-block:: rst

    Generate a TXT file.

    .. container:: jsphinx-toggle-emphasis-replace

        .. code-block:: python
            :emphasize-lines: 3-6,6,8

            from faker import Faker
            # Import the file provider we want to use
            from faker_file.providers.txt_file import TxtFileProvider

            FAKER = Faker()  # Initialise Faker instance
            FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

            txt_file = FAKER.txt_file()  # Generate a TXT file

            # Meta-data is stored inside a ``data`` attribute (``dict``).
            # The following line would produce something like /tmp/tmp/tmph8ot.txt
            print(file.data["filename"])
            # The following line would produce a text generated by Faker, used as
            # the content of the generated file.
            print(file.data["content"])

----

Example 8
~~~~~~~~~

You could get just bytes back without physically creating the file.

.. container:: jsphinx-toggle-emphasis-replace

    .. code-block:: python
        :emphasize-lines: 7

        from faker import Faker
        from faker_file.providers.txt_file import TxtFileProvider

        FAKER = Faker()  # Initialise Faker instance
        FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

        raw = FAKER.txt_file(raw=True)  # Generate a TXT file

----

The documentation snippet, the above (`Example 8`_) code was rendered from:

*Filename: example.rst*

.. code-block:: rst

    You could get just bytes back without physically creating the file.

    .. container:: jsphinx-toggle-emphasis-replace

        .. code-block:: python
            :emphasize-lines: 7

            from faker import Faker
            from faker_file.providers.txt_file import TxtFileProvider

            FAKER = Faker()  # Initialise Faker instance
            FAKER.add_provider(TxtFileProvider)  # Register the TXT file provider

            raw = FAKER.txt_file(raw=True)  # Generate a TXT file
