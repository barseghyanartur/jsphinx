==============
prismjs-sphinx
==============
**Improve developer experience**:
Write better docs. Stay concise. Never miss a detail.

.. Dependencies

.. _Sphinx: https://github.com/sphinx-doc/sphinx
.. _PrismJS: https://github.com/PrismJS/prism
.. _sphinx-rtd-theme: https://github.com/readthedocs/sphinx_rtd_theme
.. _alabaster: https://github.com/sphinx-doc/alabaster
.. _sphinx-material: https://github.com/bashtage/sphinx-material
.. _sphinx-bootstrap-theme: https://pypi.org/project/sphinx-bootstrap-theme/
.. _furo: https://github.com/pradyunsg/furo

.. Project

.. _GitHub issues: https://github.com/barseghyanartur/prismjs-sphinx/issues

.. Demos

.. _sphinx-rtd-theme demo: https://prismjs-sphinx.readthedocs.io/en/sphinx_rtd_theme/examples.html
.. _alabaster demo: https://prismjs-sphinx.readthedocs.io/en/alabaster/examples.html
.. _sphinx-material demo: https://prismjs-sphinx.readthedocs.io/en/sphinx_material/examples.html
.. _sphinx-bootstrap demo: https://prismjs-sphinx.readthedocs.io/en/bootstrap/examples.html
.. _furo demo: https://prismjs-sphinx.readthedocs.io/en/furo/examples.html
.. _faker-file documentation: https://faker-file.readthedocs.io/en/latest/creating_pdf.html#building-pdfs-with-text-using-reportlab

``prismjs-sphinx`` helps you to achieve what's mentioned above.
You could see it as a mix of loosely coupled software components and
guidelines to make things perfect.

Let me ask you a couple of conceptually connected questions:

- Do you write documentation?
- If you do, do you provide code examples along?
- Are you able to test them? Do you want to?
- Do you struggle making examples compact, yet fully functional?
- And do you want to learn how?

What if I tell you that there's an easy, non-intrusive solution?
It doesn't reinvent the wheel; just leverages what's already there.

Move on to the `demos`_ section to see it in action.

Demos
=====

See the list of available demos below. Pick a demo and from within the example
page, click on any ``See the full example`` link to see how it works.

- `sphinx-rtd-theme demo`_
- `alabaster demo`_
- `sphinx-material demo`_
- `sphinx-bootstrap demo`_
- `furo demo`_
- `faker-file documentation`_

Impressed? Want to learn and understand how does that work?

Under the hood
==============

`Sphinx`_ is a documentation generator. It has many directives, among which
the ``:literalinclude:``, which allows us to include content of a file
directly into your documentation.

``:literalinclude:`` itself has a ``:lines:`` option, which allows us to
specify which parts of the code to show. That's what we do and that's what
allows us to keep the primary focus on the most important parts of the code,
reducing cognitive load for the reader.

Consider the following code example stored in a
file ``_static/py/faker_file_docx_1.py``:

.. code-block:: python

   import os

   # Required imports
   from faker import Faker
   from faker_file.providers.docx_file import DocxFileProvider

   FAKER = Faker()  # Initialize Faker
   FAKER.add_provider(DocxFileProvider)  # Register DocxFileProvider

   # Generate DOCX file
   docx_file = FAKER.docx_file()

   # Test things out
   print(docx_file)
   print(docx_file.data["filename"])
   assert os.path.exists(docx_file.data["filename"])

See the following snippet:

.. code-block:: rst

    .. literalinclude:: _static/py/faker_file_docx_1.py
       :language: python
       :lines: 3-11

The above mentioned snippet will be rendered as follows:

.. code-block:: python

    # Required imports
    from faker import Faker
    from faker_file.providers.docx_file import DocxFileProvider

    FAKER = Faker()  # Initialize Faker
    FAKER.add_provider(DocxFileProvider)  # Register DocxFileProvider

    # Generate DOCX file
    docx_file = FAKER.docx_file()

However, we also understand the importance of the broader context. For that
we use the ``:download:`` directive, which allows us to create a downloadable
link to a file (the same file we already included into the documentation
using ``:literalinclude:``). By that we ensure that those interested in the
complete code can easily access it.

See the following snippet:

.. code-block:: rst

    *See the full example*
    :download:`here <_static/py/faker_file_docx_1.py>`

The above mentioned snippet will be rendered as follows (the link is
clickable):

.. raw:: html

   <p>
     <em>See the full example</em>
     <a class="reference download internal" href="https://raw.githubusercontent.com/barseghyanartur/prismjs-sphinx/main/docs/_static/py/faker_file_docx_1.py">
       <span class="pre">here</span>
     </a>
   </p>

And this is where ``prismjs-sphinx`` steps in. Using provided JavaScript,
we hook to the links generated by the ``:download:`` directive and instead
of downloading the content, show it in-line, right in place.

Finally, `PrismJS`_ syntax highlighter is used to beautify the code and make
it look close to the code highlighting of your `Sphinx`_ theme of choice.

Themes
======

`PrismJS`_ themes based on `Sphinx`_'s aesthetics:

- `sphinx-rtd-theme`_ (key: ``sphinx_rtd_theme``, `sphinx-rtd-theme demo`_)
- `alabaster`_ (key: ``alabaster``, `alabaster demo`_)
- `sphinx-material`_ (key: ``sphinx_material``, `sphinx-material demo`_)
- `sphinx-bootstrap-theme`_ (key: ``bootstrap``, `sphinx-bootstrap demo`_)
- `furo`_ (key: ``furo``, `furo demo`_)

Installation
============

Via CDN (jsDelivr)
------------------

To use both the theme and adapter in your HTML:

.. code-block:: html

   <!-- CSS for PrismJS Sphinx RTD theme -->
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/barseghyanartur/prismjs-sphinx/src/css/sphinx_rtd_theme.css">

   <!-- JS for PrismJS Sphinx Adapter -->
   <script src="https://cdn.jsdelivr.net/gh/barseghyanartur/prismjs-sphinx/src/js/download_adapter.js">
   </script>

Sphinx integration
==================

Configuration
-------------

To integrate both into your `Sphinx`_ project, add the following in your ``conf.py``:

.. code-block:: python

   # ************************************************************
   # ************************** The theme ***********************
   # ************************************************************
   html_theme = "sphinx_rtd_theme"

   # ************************************************************
   # ***************** Additional JS/CSS files ******************
   # ************************************************************
   html_css_files = [
       # ...
       "https://cdn.jsdelivr.net/gh/barseghyanartur/prismjs-sphinx/src/css/sphinx_rtd_theme.css",
       # ...
   ]

   html_js_files = [
       # ...
       "https://cdn.jsdelivr.net/gh/barseghyanartur/prismjs-sphinx/src/js/download_adapter.js",
       # ...
   ]

A complete configuration example, together with loaded `PrismJS`_ and the
toolbar with plugins, would look as follows:

.. code-block:: python

   prismjs_base = "//cdnjs.cloudflare.com/ajax/libs/prism/1.29.0"

   html_css_files = [
       f"{prismjs_base}/themes/prism.min.css",
       f"{prismjs_base}/plugins/toolbar/prism-toolbar.min.css",
       f"{prismjs_base}/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.css",
       "https://cdn.jsdelivr.net/gh/barseghyanartur/prismjs-sphinx/src/css/sphinx_rtd_theme.css",
   ]

   html_js_files = [
       f"{prismjs_base}/prism.min.js",
       f"{prismjs_base}/plugins/autoloader/prism-autoloader.min.js",
       f"{prismjs_base}/plugins/toolbar/prism-toolbar.min.js",
       f"{prismjs_base}/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js",
       "https://cdn.jsdelivr.net/gh/barseghyanartur/prismjs-sphinx/src/js/download_adapter.js",
   ]

----

You can also use other `Sphinx`_ themes, such as `alabaster`_, `sphinx-bootstrap-theme`_,
`sphinx-material`_ or `furo`_.

`alabaster`_, `furo`_, `sphinx-bootstrap-theme`_ and `sphinx-material`_ do
require loading jQuery in the ``html_js_files``.

.. code-block:: python

   html_js_files.insert(
       0,
       "//cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js",
   )

Make sure to specify appropriate value (theme key) in ``html_theme``,
as follows (pick one):

.. code-block:: python

   html_theme = "alabaster"
   html_theme = "sphinx_rtd_theme"
   html_theme = "sphinx_material"
   html_theme = "bootstrap"
   html_theme = "furo"

Finally, make sure to specify correct path to the desired theme:

.. code-block:: python

   html_css_files = [
       # ...
       f"https://cdn.jsdelivr.net/gh/barseghyanartur/prismjs-sphinx/src/css/{html_theme}.css",
   ]

License
=======

MIT

Support
=======

For security issues contact me at the e-mail given in the `Author`_ section.

For overall issues, go to `GitHub issues`_.

Author
======

Artur Barseghyan
`artur.barseghyan@gmail.com <artur.barseghyan@gmail.com>`__.
